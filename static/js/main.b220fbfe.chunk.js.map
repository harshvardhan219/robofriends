{"version":3,"sources":["components/card.js","components/Cardlist.js","components/robots.js","components/Searchbox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","Cardlist","robots","cardComponents","map","user","i","key","username","Searchbox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filterRobots","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b220fbfe.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'tachyons';\r\nconst Card = ({ name,email,id}) => {\r\n\t\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 grow ma2 bw2 shadow-5'>\r\n\t\t <img alt='robo' src={`https://robohash.org/${id}?200x200`} />\r\n\t\t  <div>\r\n\t\t   <h2> {name} </h2>\r\n\t\t   <p> {email} </p>\r\n          </div>\r\n\t\t</div>\r\n\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport  Card from './card';\r\nconst Cardlist = ( {robots} ) => \r\n {\r\n \tconst cardComponents = robots.map((user,i) => {\r\n \t\treturn <Card key ={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\r\n \t})\r\n \treturn(\r\n \t\t\t<div>\r\n       \t\t{cardComponents}\r\n     </div>\r\n\r\n \t\t);\r\n }\r\n\r\n export default Cardlist;\r\n\r\n","export const robots = [\r\n  {\r\n    id: 1,\r\n    name: 'Leanne Graham',\r\n    username: 'Bret',\r\n    email: 'Sincere@april.biz'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Ervin Howell',\r\n    username: 'Antonette',\r\n    email: 'Shanna@melissa.tv'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Clementine Bauch',\r\n    username: 'Samantha',\r\n    email: 'Nathan@yesenia.net'\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Patricia Lebsack',\r\n    username: 'Karianne',\r\n    email: 'Julianne.OConner@kory.org'\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Chelsey Dietrich',\r\n    username: 'Kamren',\r\n    email: 'Lucio_Hettinger@annie.ca'\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Mrs. Dennis Schulist',\r\n    username: 'Leopoldo_Corkery',\r\n    email: 'Karley_Dach@jasper.info'\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'Kurtis Weissnat',\r\n    username: 'Elwyn.Skiles',\r\n    email: 'Telly.Hoeger@billy.biz'\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'Nicholas Runolfsdottir V',\r\n    username: 'Maxime_Nienow',\r\n    email: 'Sherwood@rosamond.me'\r\n  },\r\n  {\r\n    id: 9,\r\n    name: 'Glenna Reichert',\r\n    username: 'Delphine',\r\n    email: 'Chaim_McDermott@dana.io'\r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'Clementina DuBuque',\r\n    username: 'Moriah.Stanton',\r\n    email: 'Rey.Padberg@karina.biz'\r\n  }\r\n];\r\n","import React from 'react';\r\n\r\nconst Searchbox = ({searchfield, searchChange}) => \r\n{\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t<input \r\n\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\ttype='search'\r\n\t\tplaceholder='Search Robots'\r\n\t\tonChange={searchChange}\r\n\t\t />\r\n\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Searchbox;","import React from 'react';\r\n\r\nconst Scroll = (props) =>\r\n{\r\n\treturn(\r\n\t\t<div style ={{ overflowY: 'scroll' , border : '1px solid black' , height : '800px'}}>\r\n\t\t {props.children}\r\n\t\t</div>\r\n\t\t);\r\n};\r\nexport default Scroll;","import React , {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\ncomponentDidCatch(error,info) {\r\n\tthis.setState({ hasError: true })\r\n}\r\n\r\nrender()\r\n{\r\n\tif (this.state.hasError)\r\n\t{\r\n\t\treturn <h1>Not cool</h1>\r\n\t}\r\n\treturn this.props.children;\r\n}\r\n\r\n}\r\n\r\nexport default ErrorBoundry;","import React ,{Component} from 'react';\r\nimport Cardlist from '../components/Cardlist.js';\r\nimport {robots} from '../components/robots';\r\nimport Searchbox from '../components/Searchbox';\r\nimport Scroll from '../components/Scroll.js';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\nconst state = {\r\n\t\r\n}\r\nclass App extends Component {\r\n\tconstructor(){\r\n\tsuper()\r\n\tthis.state = {\r\n\t\trobots : robots,\r\n\t\tsearchfield: ''\r\n\t}\r\n\r\n}\r\n\r\n  componentDidMount () {\r\n  \tfetch('https://jsonplaceholder.typicode.com/users')\r\n  \t.then(response=>response.json())\r\n  \t.then(users => {this.setState({robots: users})});\r\n  }\r\n\r\nonSearchChange = (event) => {\r\n\tthis.setState({searchfield : event.target.value})\r\n\t\r\n}\r\n\r\n\trender(){\r\n\r\n\t\tconst filterRobots = this.state.robots.filter(robots => \r\n\t{\r\n\t\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\t})\r\n\r\n\treturn (\r\n\t\t<div className='tc'>\r\n\t\t<h1 className='f1'>RoBO that</h1>\r\n\t\t<Searchbox searchChange={this.onSearchChange}/>\r\n\t\t<Scroll>\r\n\t\t<ErrorBoundry>\r\n\t\t<Cardlist robots={filterRobots}/>\r\n\t\t</ErrorBoundry>\r\n\t\t</Scroll>\r\n\t\t</div>\r\n\t\t);\r\n    }\r\n} \r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport  App from './containers/App';\nimport  Card from './components/card';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n\t<App />,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}